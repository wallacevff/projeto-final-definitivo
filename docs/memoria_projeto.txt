=== Estado Atual do Projeto EAD ===

Data: 2025-09-29 22:02:37

1. API e Contratos
 - `BaseController` alinhado com o novo `IDefaultService` e endpoints REST criados para usuários, cursos, turmas, conteúdos, atividades, submissões, fórum, chat, mídia e inscrições (`src/ProjetoFinal.Api/Controllers`).
 - Contratos e serviços já expõem funcionalidades como busca por slug, gerenciamento de inscrições e submissões de atividades.

2. Infraestrutura de Dados
 - `AppDbContextFactory` garante execução dos comandos `dotnet ef` com base no `appsettings` (ambientes Development/Default usando `(localdb)\\mssqllocaldb` ? `ProjetoFinalDb`).
 - Mapeamentos usam `DeleteBehavior.Restrict` onde necessário para evitar múltiplos cascades; migração `20250930002230_InitialCreate` aplicada ao SQL Server local.

3. Frontend Angular (novo)
 - Shell reformulado com sidebar, topbar e avatar, preparado para navegação entre módulos (`app.component.*`).
 - Shell reformulado com sidebar, topbar e avatar, preparado para navegacao entre modulos (`app.component.*`).
 - Paginas reais para cursos, turmas, atividades e forum com dados mockados e layout responsivo (`pages/courses`, `pages/class-groups`, `pages/activities`, `pages/forum`).
 - Paginas agora consomem dados reais via services (cursos, turmas, atividades, forum) com estado de carregamento e tratamento de erros.
 - Estilos globais e do shell com tokens de cor, gradientes e responsividade definidos em `app.component.css` e `styles.css`.

4. Build e Execução
 - `dotnet build` e `npm run build` finalizam com sucesso; permaneceram os warnings conhecidos do Angular (budget >500 kB e regras de CSS herdadas).
 - Registro de `IUnityOfWork` garantido via `services.AddScoped<IUnityOfWork, UnityOfWork>()` no IoC.

Observação próximo encontro: retomar os itens abaixo na abertura da próxima sessão.

5. Próximos Passos Guardados
 - Integrar o dashboard a dados reais da API, substituindo os números mockados.
 - Implementar telas completas para cursos, turmas, atividades e fórum baseadas no novo layout.
 - Tratar os avisos de build Angular (budget e seletores) antes do pacote de produção.

=== Estado Atual do Projeto EAD ===

Data: 2025-10-01 22:33:01

1. API e Contratos
 - Sem novas alteracoes nesta sessao.

2. Infraestrutura de Dados
 - Sem novas alteracoes nesta sessao.

3. Frontend Angular (novo)
 - Sidebar agora utiliza os icones do Bootstrap Icons aplicados com ngClass nos itens de navegacao (app.component.html / app.component.ts).
 - O arquivo styles.css importa bootstrap-icons/font/bootstrap-icons.css para garantir o carregamento global dos icones.

4. Build e Execucao
 - Nao foram executados testes automatizados nesta sessao; recomenda-se validacao visual com npm start.

5. Observacao proximo encontro
 - Reforcar a consulta periodica aos documentos docs/propont.txt e docs/especificacao.txt como base de requisitos.
 - Manter as pendencias registradas nas entradas anteriores.
 - Commits devem ser criados por categoria, respeitando a organizacao definida pelo usuario.
=== Estado Atual do Projeto EAD ===

Data: 2025-10-01 22:50:46

1. API e Contratos
 - Sem novas alteracoes nesta sessao.

2. Infraestrutura de Dados
 - Sem novas alteracoes nesta sessao.

3. Frontend Angular (novo)
 - Criada pagina de criacao de curso com formulario reativo incluindo configuracao de modalidade e turmas dinamicas (src/ProjetoFinal.ClientApp/src/app/pages/course-create).
 - CoursesService agora possui contrato CreateCoursePayload e metodo createCourse para integrar com o endpoint de cadastro.

4. Build e Execucao
 - Nao executei build ou testes automatizados; sugiro validar com npm start e testes de API ao conectar no backend.

5. Observacao proximo encontro
 - Validar o envio do formulario contra a API real e ajustar mensagens conforme resposta.
 - Manter as pendencias anteriores, consulta aos arquivos docs/propont.txt e docs/especificacao.txt e a regra de commits por categoria.
=== Estado Atual do Projeto EAD ===

Data: 2025-10-12 08:45:42

1. API e Contratos
 - Seed automatico garante categorias padrao e instrutor demonstrativo ao subir o backend.

2. Infraestrutura de Dados
 - Sem novas alteracoes nesta sessao.

3. Frontend Angular (novo)
 - Tela de criacao de cursos agora carrega categorias e instrutores reais via API, exibe estados de carregamento/erro e impede envio sem dados obrigatorios.
 - Fluxo de gravacao envia as turmas criadas para a API apos o curso ser salvo e publica automaticamente quando solicitado.

4. Build e Execucao
 - npm run build executado com sucesso (mantidos os avisos conhecidos de budget e seletores do Bootstrap).

5. Observacao proximo encontro
 - Validar a disponibilidade de categorias/instrutores no backend antes de novas demos e revisar o feedback visual apos a gravacao das turmas/publicacao.


=== Estado Atual do Projeto EAD ===

Data: 2025-10-16 21:57:54

1. API e Contratos
 - Autenticacao JWT implementada com emissao via `AuthController`/`AuthAppService` e claims para identificacao do instrutor logado.
 - `CoursesController` passa a criar cursos vinculando automaticamente o `InstructorId` a partir do token e aceita rotas `/api` e `/api/v1`.

2. Infraestrutura de Dados
 - Migration `20251017001034_AddUserCredentials` adiciona `Username`/`PasswordHash` em `Users` e migra dados existentes.
 - Seeder cria usuarios padrao `wallace.vidal` (professor) e `robert.leite` (aluno) com hash BCrypt.

3. Frontend Angular (novo)
 - Fluxo de login JWT com guarda, interceptor e pagina dedicada; formularios do shell adaptados para exibir usuario logado.
 - Formulario de criacao de cursos agora usa categoria texto livre e dispensa a escolha manual de instrutor.

4. Build e Execucao
 - `dotnet build ProjetoFinal.sln` e `dotnet ef database update` executados; permanecem avisos de tamanho de bundle Angular e regras CSS.

5. Observacao proximo encontro
 - Revisar protecoes por perfil (professor/aluno) nas rotas e tratar avisos de build Angular.



=== Estado Atual do Projeto EAD ===

Data: 2025-10-17 15:40:00

1. API e Contratos
 - ClassGroupsController agora responde tambem em /api/v1/class-groups, alinhando com os endpoints usados pelo frontend.
 - Semente fixa GUIDs dos usuarios padrao, evitando conflitos ao recriar banco.
 - DTOs e servicos ajustados para que atividades e foruns dependam de turmas, com flag de distribuicao de materiais nas turmas.

2. Infraestrutura de Dados
 - Migration unica 20251017143934_InitialCreate cobre os novos relacionamentos (activities -> classGroups, forum threads por turma e flag de distribuicao).
 - Repositorios de cursos incluem Instructor e turmas com matriculas para consultas completas.

3. Frontend Angular
 - Tela de criacao de cursos envia turmas e trata publicacao; painel e listagem direcionam para o fluxo correto.
 - Pagina de gerenciamento de curso exibe cards de resumo e turmas; cards de cursos mostram instrutor.
 - Forum e atividades exibem turmas associadas; servicos atualizados para os novos campos.

4. Build e Execucao
 - dotnet build ProjetoFinal.sln -c Release concluido (mantidos avisos de budget/seletores do Angular).

5. Pendencias
 - Avaliar ajuste no warning de disabled nos formularios.
 - Popular dashboard e forum com dados reais quando API estiver pronta.
